#!/usr/bin/python

import os
import re
import subprocess
import sys

if len(sys.argv) < 2:
  print 'Syntax: %s <diff file> <candidate owners>' % os.path.basename(os.path.realpath(__file__))
  sys.exit(1)

indexLinePattern = re.compile('Index: (.*)')
f = open(sys.argv[1], 'r')
files = [ indexLinePattern.match(i).group(1).strip() for i in f if indexLinePattern.match(i) ]

print '\nChecking for owners for the files:\n%s' % '\n'.join([ '\t%s' % file for file in files ])

svin_owners_process = subprocess.Popen([ "svin", "owners" ] + files, stdout=subprocess.PIPE)
out, err = svin_owners_process.communicate()

blackListedAcls = set([ 'acl-of-last-resort.acl', 'trunk.acl' ])

aclLinePattern = re.compile('\s*([^:]*): (.*)')
svin_owners_lines = out.split('\n')
aclMatches =  [ aclLinePattern.match(i) for i in svin_owners_lines if aclLinePattern.match(i) ]

aclMatches = [ i for i in aclMatches if i.group(1) not in blackListedAcls ]

aclsList = [ (i.group(1), set(i.group(2).split(", "))) for i in aclMatches ]
acls = dict(aclsList)

perfectSetOfCandidates = True
candidateOwners = set(sys.argv[2:])
for acl in acls:
  if not candidateOwners.intersection(acls[acl]):
    print 'Choose someone for %s: %s' % (acl, ','.join(list(acls[acl])))
    perfectSetOfCandidates = False

owners = reduce(lambda x, y: x | y, [ acls[acl] for acl in acls ])
ownerAcls = { }
for owner in owners:
  ownerAcls[owner] = set([ acl for acl in acls if owner in acls[acl] ])

consideredOwners = []
for owner in candidateOwners:
  for consideredOwner in consideredOwners:
    if ownerAcls[owner].issubset(ownerAcls[consideredOwner]):
      print '%s may not be necessary. %s can approve all their ACLs.' % (owner, consideredOwner)
      perfectSetOfCandidates = False
  consideredOwners.append(owner)


if perfectSetOfCandidates:
  print '\n\nThis list of owners is perfect. Go right on!\n'
