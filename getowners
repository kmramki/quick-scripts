#!/usr/bin/python

import os
import re
import subprocess
import sys
from collections import defaultdict

BLACKLISTED_ACLS = set([ 'acl-of-last-resort.acl', 'trunk.acl', 'new-service.acl' ])
PREFERRED_OWNERS = [ 'bfalconn', 'jbernard', 'smukherj', 'htam', 'amaeda', 'jmargata', 'cflei', 'cpruett', 'fcao', 'qliu' ]

if len(sys.argv) < 2:
  print 'Syntax: %s <diff file> <candidate owners>' % os.path.basename(os.path.realpath(__file__))
  sys.exit(1)

indexLinePattern = re.compile('Index: (.*)')
f = open(sys.argv[1], 'r')
files = [ indexLinePattern.match(i).group(1).strip() for i in f if indexLinePattern.match(i) ]

print '\nChecking for owners for the files:\n%s' % '\n'.join([ '\t%s' % file for file in files ])

#svin_owners_process = subprocess.Popen([ "svin", "owners" ] + files, stdout=subprocess.PIPE)
#out, err = svin_owners_process.communicate()

out = open('samplesvinowners.garb', 'r').read()
err = None

if err:
  print 'Could not run svin owners: %s' % err
  sys.exit(2)


aclLinePattern = re.compile('\s*([^:]*): (.*)')
filePathLinePattern = re.compile('\s*([^:]*):$')
svin_owners_lines = out.split('\n')

currentFile = None
aclsNeededToOwners = { }
ownerToMissingAcls = defaultdict(set)
aclsToFiles = defaultdict(set)
allFiles = set()
for i in svin_owners_lines:
  filePathMatch = filePathLinePattern.match(i)
  aclMatch = aclLinePattern.match(i)
  if filePathMatch:
    currentFile = filePathLinePattern.match(i).group(1)
    allFiles.add(currentFile)
  elif aclMatch:
    acl = aclMatch.group(1)
    if acl in BLACKLISTED_ACLS:
      continue
    owners = aclMatch.group(2).split(", ")
    aclsNeededToOwners[acl] = owners
    aclsToFiles[acl].add(currentFile)
    for owner in owners:
      ownerToMissingAcls[owner].add(acl)

missingAcls = set(aclsNeededToOwners.keys())
filesWithMissingAcls = set(allFiles)
print 'ACLs needed for this checkin: %s\n' % ','.join(missingAcls)
candidateOwners = set(sys.argv[2:])

minimalSetOfOwners = defaultdict(set)
additionalOwners = defaultdict(set)
noACLPeople = set()
unnecessaryPeople = set()
for candidateOwner in candidateOwners:
  if not candidateOwner in ownerToMissingAcls:
    noACLPeople.add(candidateOwner)
  elif not ownerToMissingAcls[candidateOwner].intersection(missingAcls):
    unnecessaryPeople.add(candidateOwner)
  else:
    aclsFromThisOwner = ownerToMissingAcls[candidateOwner]
    minimalSetOfOwners[candidateOwner] |= aclsFromThisOwner
    filesApprovedByThisOwner = set([file for acl in aclsFromThisOwner for file in aclsToFiles[acl] ])
    missingAcls -= aclsFromThisOwner
    filesWithMissingAcls -= filesApprovedByThisOwner

for owner in PREFERRED_OWNERS:
  if owner in candidateOwners:
    continue
  aclsFromThisOwner = ownerToMissingAcls[owner]
  missingAclsFromThisOwner = aclsFromThisOwner.intersection(missingAcls)
  if missingAclsFromThisOwner:
    missingAcls -= missingAclsFromThisOwner
    filesApprovedByThisOwner = set([file for acl in missingAclsFromThisOwner for file in aclsToFiles[acl] ])
    if filesApprovedByThisOwner.intersection(filesWithMissingAcls):
      perfectSetOfCandidates = False
      minimalSetOfOwners[owner] |= aclsFromThisOwner
      filesWithMissingAcls -= filesApprovedByThisOwner
    else:
      additionalOwners[owner] = missingAclsFromThisOwner

necessaryAcls = set()
aclsWithAllFilesCovered = set()
for missingAcl in missingAcls:
  necessaryAcls = set( [ acl for acl in missingAcls if aclsToFiles[acl].intersection(filesWithMissingAcls) ] )

aclsWithAllFilesCovered = missingAcls - necessaryAcls

if noACLPeople:
  print 'Why are %s included? They seem to not have any ACL needed!' % ','.join(noACLPeople)
if unnecessaryPeople:
  print 'Looks like %s is not really necessary.' %  ','.join(unnecessaryPeople)

neededAdditionalOwners = dict([ (k, v) for (k, v) in minimalSetOfOwners.items() if k not in candidateOwners ])
if neededAdditionalOwners:
  print 'Add %s' % ';'.join([ '%s for %s' % (owner, ','.join(acls)) for (owner, acls) in neededAdditionalOwners.items() ])

if additionalOwners:
  print 'You may want %s' % ';'.join([ '%s for %s' % (owner, ','.join(acls)) for (owner, acls) in additionalOwners.items() ])

if necessaryAcls:
  print 'You need someone for %s' % '; '.join([ '%s (%s)' % (acl, ', '.join(aclsNeededToOwners[acl])) for acl in necessaryAcls ])

if aclsWithAllFilesCovered:
  print 'You may want someone for %s' % '; '.join([ '%s (%s)' % (acl, ', '.join(aclsNeededToOwners[acl])) for acl in aclsWithAllFilesCovered ])

print '\nI suggest these owners, at the very least: %s' % ','.join(minimalSetOfOwners)

