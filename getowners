#!/usr/bin/python

import os
import re
import subprocess
import sys
from collections import defaultdict

BLACKLISTED_ACLS = set([ 'acl-of-last-resort.acl', 'trunk.acl' ])
PREFERRED_OWNERS = set([ 'bfalconn', 'jbernard', 'smukherj', 'htam', 'amaeda', 'jmargata', 'cflei', 'cpruett', 'fcao', 'qliu' ])

if len(sys.argv) < 2:
  print 'Syntax: %s <diff file> <candidate owners>' % os.path.basename(os.path.realpath(__file__))
  sys.exit(1)

indexLinePattern = re.compile('Index: (.*)')
f = open(sys.argv[1], 'r')
files = [ indexLinePattern.match(i).group(1).strip() for i in f if indexLinePattern.match(i) ]

print '\nChecking for owners for the files:\n%s' % '\n'.join([ '\t%s' % file for file in files ])

#svin_owners_process = subprocess.Popen([ "svin", "owners" ] + files, stdout=subprocess.PIPE)
#out, err = svin_owners_process.communicate()

out = open('samplesvinowners.garb', 'r').read()


aclLinePattern = re.compile('\s*([^:]*): (.*)')
svin_owners_lines = out.split('\n')

aclMatches =  [ aclLinePattern.match(i) for i in svin_owners_lines if aclLinePattern.match(i) ]
aclMatches = [ i for i in aclMatches if i.group(1) not in BLACKLISTED_ACLS ]
aclsList = [ (i.group(1), set(i.group(2).split(", "))) for i in aclMatches ]

aclsNeededToOwners = dict(aclsList)
missingAcls = set(aclsNeededToOwners.keys())
reverseAclsList = [ (owner, acl) for (acl, owners) in aclsList for owner in owners ]

print '\nACLs needed for this checkin: %s' % ','.join(missingAcls)

perfectSetOfCandidates = True

ownerToMissingAcls = defaultdict(set)
for (owner, acl) in reverseAclsList:
  ownerToMissingAcls[owner].add(acl)

candidateOwners = set(sys.argv[2:])
suggestedOwners = set([])
for candidateOwner in candidateOwners:
  if not candidateOwner in ownerToMissingAcls:
    print '\nWhy is %s included? They seem to not have any ACL needed!' % candidateOwner
    perfectSetOfCandidates = False
  elif not ownerToMissingAcls[candidateOwner].intersection(missingAcls):
    print '\nLooks like %s is not really necessary.' % candidateOwner
    perfectSetOfCandidates = False
  else:
    suggestedOwners.add(candidateOwner)
    missingAcls -= ownerToMissingAcls[candidateOwner]

for preferredOwner in PREFERRED_OWNERS:
  aclsToGetFromPreferredOwner = ownerToMissingAcls[preferredOwner]
  if aclsToGetFromPreferredOwner.intersection(missingAcls):
    suggestedOwners.add(preferredOwner)
    missingAcls -= aclsToGetFromPreferredOwner
    if preferredOwner not in suggestedOwners:
      suggestedOwners.add(preferredOwner)

for suggestedOwner in suggestedOwners:
  if suggestedOwner not in candidateOwners:
    print '\nAdd %s for %s' % (suggestedOwner, ','.join(ownerToMissingAcls(suggestedOwner)))
    perfectSetOfCandidates = False

print '\nThese owners seem fine: %s' % ','.join(suggestedOwners)
for missingAcl in missingAcls:
  ownersOfMissingAcl = aclsNeededToOwners[missingAcl]
  print 'Choose someone for %s: %s' % (missingAcl, ','.join(list(ownersOfMissingAcl)))
  perfectSetOfCandidates = False


if perfectSetOfCandidates:
  print '\n\nThis list of owners is perfect. Go right on!\n'


